"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var inferno_1 = require("inferno");
var inferno_component_1 = require("inferno-component");
var match_1 = require("./match");
var RouterContext_1 = require("./RouterContext");
function createrRouter(history) {
    if (!history) {
        throw new TypeError('Inferno: Error "inferno-router" requires a history prop passed');
    }
    return {
        push: history.push,
        replace: history.replace,
        listen: history.listen,
        createHref: history.createHref,
        isActive: function (url) {
            return match_1.matchPath(true, url, this.url);
        },
        get location() {
            return history.location.pathname !== 'blank' ? history.location : {
                pathname: '/',
                search: ''
            };
        },
        get url() {
            return this.location.pathname + this.location.search;
        }
    };
}
var Router = (function (_super) {
    __extends(Router, _super);
    function Router(props, context) {
        var _this = _super.call(this, props, context) || this;
        _this.router = createrRouter(props.history);
        _this.state = {
            url: props.url || _this.router.url
        };
        return _this;
    }
    Router.prototype.componentWillMount = function () {
        var _this = this;
        if (this.router) {
            this.unlisten = this.router.listen(function () {
                _this.routeTo(_this.router.url);
            });
        }
    };
    Router.prototype.componentWillReceiveProps = function (nextProps) {
        var _this = this;
        this.setState({ url: nextProps.url }, this.props.onUpdate ? function () { return _this.props.onUpdate(); } : null);
    };
    Router.prototype.componentWillUnmount = function () {
        if (this.unlisten) {
            this.unlisten();
        }
    };
    Router.prototype.routeTo = function (url) {
        var _this = this;
        this.setState({ url: url }, this.props.onUpdate ? function () { return _this.props.onUpdate(); } : null);
    };
    Router.prototype.render = function (props) {
        var _this = this;
        var hit = match_1.default(props.children, this.state.url);
        if (hit.redirect) {
            setTimeout(function () {
                _this.router.replace(hit.redirect);
            }, 0);
            return null;
        }
        return inferno_1.createVNode(4 /* ComponentClass */, RouterContext_1.default, {
            location: this.state.url,
            router: this.router,
            matched: hit.matched
        });
    };
    return Router;
}(inferno_component_1.default));
exports.default = Router;
