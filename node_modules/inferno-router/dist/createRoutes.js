/**
 * Helper function for parsing plain route configurations
 * based on react-router createRoutes handler.
 *
 * currently supported keys:
 * - path
 * - component
 * - childRoutes
 * - indexRoute
 *
 * Usage example:
 * const routes = createRoutes([
 *  {
 *    path        : '/',
 *    component   : App,
 *    indexRoute  : {
 *      component     : Home,
 *    },
 *    childRoutes : [
 *      {
 *        path : 'films/',
 *        component : Films,
 *        childRoutes : {
 *          path : 'detail/:id',
 *          component : FilmDetail,
 *        }
 *      },
 *      {
 *        path : '/*',
 *        component : NoMatch
 *      }
 *    ]
 *  }
 * ]);
 *
 * Usage on Router JSX
 * <Router history={browserHistory} children={routes} />
 */
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var inferno_create_element_1 = require("inferno-create-element");
var inferno_shared_1 = require("inferno-shared");
var Route_1 = require("./Route");
var handleIndexRoute = function (indexRouteNode) { return inferno_create_element_1.default(Route_1.default, indexRouteNode); };
var handleChildRoute = function (childRouteNode) { return handleRouteNode(childRouteNode); };
var handleChildRoutes = function (childRouteNodes) { return childRouteNodes.map(handleChildRoute); };
function handleRouteNode(routeConfigNode) {
    if (routeConfigNode.indexRoute && !routeConfigNode.childRoutes) {
        return inferno_create_element_1.default(Route_1.default, routeConfigNode);
    }
    // create deep copy of config
    var node = {};
    for (var key in routeConfigNode) {
        node[key] = routeConfigNode[key];
    }
    node.children = [];
    // handle index route config
    if (node.indexRoute) {
        node.children.push(handleIndexRoute(node.indexRoute));
        delete node.indexRoute;
    }
    // handle child routes config
    if (node.childRoutes) {
        var nodes = inferno_shared_1.isArray(node.childRoutes) ? node.childRoutes : [node.childRoutes];
        (_a = node.children).push.apply(_a, handleChildRoutes(nodes));
        delete node.childRoutes;
    }
    // cleanup to match native rendered result
    if (node.children.length === 1) {
        node.children = node.children[0];
    }
    if ((inferno_shared_1.isArray(node.children) && node.children.length === 0) ||
        (!inferno_shared_1.isArray(node.children) && Object.keys(node.children).length === 0)) {
        delete node.children;
    }
    return inferno_create_element_1.default(Route_1.default, node);
    var _a;
}
exports.default = function (routeConfig) { return routeConfig.map(handleRouteNode); };
