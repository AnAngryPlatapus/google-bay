"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var inferno_1 = require("inferno");
var inferno_shared_1 = require("inferno-shared");
var path_to_regexp_es6_1 = require("path-to-regexp-es6");
var utils_1 = require("./utils");
var cache = new Map();
/**
 * Returns a node containing only the matched components
 * @param routes
 * @param currentURL
 * @returns {any|VComponent}
 */
function match(routes, currentURL) {
    var location = utils_1.getURLString(currentURL);
    return matchRoutes(inferno_shared_1.toArray(routes), location, '/');
}
exports.default = match;
/**
 * Go through every route and create a new node
 * with the matched components
 * @param _routes
 * @param currentURL
 * @param parentPath
 * @param redirect
 * @returns {object}
 */
function matchRoutes(_routes, currentURL, parentPath, redirect) {
    if (currentURL === void 0) { currentURL = '/'; }
    if (parentPath === void 0) { parentPath = '/'; }
    if (redirect === void 0) { redirect = false; }
    var routes = inferno_shared_1.isArray(_routes) ? utils_1.flatten(_routes) : inferno_shared_1.toArray(_routes);
    var _a = currentURL.split('?'), _b = _a[0], pathToMatch = _b === void 0 ? '/' : _b, _c = _a[1], search = _c === void 0 ? '' : _c;
    var params = utils_1.mapSearchParams(search);
    routes.sort(utils_1.pathRankSort);
    for (var i = 0, len = routes.length; i < len; i++) {
        var route = routes[i];
        var props = route.props || utils_1.emptyObject;
        var routePath = props.from || props.path || '/';
        var location_1 = parentPath + utils_1.toPartialURL(routePath, parentPath).replace(/\/\//g, '/');
        var isLast = utils_1.isEmpty(props.children);
        var matchBase = matchPath(isLast, location_1, pathToMatch);
        if (matchBase) {
            var children = props.children;
            if (props.from) {
                redirect = props.to;
            }
            if (children) {
                var matchChild = matchRoutes(children, currentURL, location_1, redirect);
                if (matchChild) {
                    if (matchChild.redirect) {
                        return {
                            location: location_1,
                            redirect: matchChild.redirect
                        };
                    }
                    children = matchChild.matched;
                    var childProps = children.props.params;
                    for (var key in childProps) {
                        params[key] = childProps[key];
                    }
                }
                else {
                    children = null;
                }
            }
            var matched = inferno_1.default.cloneVNode(route, {
                params: inferno_shared_1.combineFrom(params, matchBase.params),
                children: children
            });
            return {
                location: location_1,
                redirect: redirect,
                matched: matched
            };
        }
    }
}
/**
 * Converts path to a regex, if a match is found then we extract params from it
 * @param end
 * @param routePath
 * @param pathToMatch
 * @returns {any}
 */
function matchPath(end, routePath, pathToMatch) {
    var key = routePath + "|" + end;
    var regexp = cache.get(key);
    if (!regexp) {
        var keys = [];
        regexp = { pattern: path_to_regexp_es6_1.default(routePath, keys, { end: end }), keys: keys };
        cache.set(key, regexp);
    }
    var m = regexp.pattern.exec(pathToMatch);
    if (!m) {
        return null;
    }
    var path = m[0];
    var params = Object.create(null);
    for (var i = 1, len = m.length; i < len; i += 1) {
        params[regexp.keys[i - 1].name] = utils_1.decode(m[i]);
    }
    return {
        path: path === '' ? '/' : path,
        params: params
    };
}
exports.matchPath = matchPath;
