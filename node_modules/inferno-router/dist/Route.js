"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var inferno_component_1 = require("inferno-component");
var inferno_create_element_1 = require("inferno-create-element");
var utils_1 = require("./utils");
var resolvedPromise = Promise.resolve();
var Route = (function (_super) {
    __extends(Route, _super);
    function Route(props, context) {
        var _this = _super.call(this, props, context) || this;
        _this._onComponentResolved = function (error, component) {
            _this.setState({
                asyncComponent: component
            });
        };
        _this.state = {
            asyncComponent: null
        };
        return _this;
    }
    Route.prototype.componentWillMount = function () {
        var _this = this;
        var onEnter = this.props.onEnter;
        var router = this.context.router;
        if (onEnter) {
            resolvedPromise.then(function () {
                onEnter({ props: _this.props, router: router });
            });
        }
        var getComponent = this.props.getComponent;
        if (getComponent) {
            resolvedPromise.then(function () {
                getComponent({ props: _this.props, router: router }, _this._onComponentResolved);
            });
        }
    };
    Route.prototype.onLeave = function (trigger) {
        if (trigger === void 0) { trigger = false; }
        var onLeave = this.props.onLeave;
        var router = this.context.router;
        if (onLeave && trigger) {
            onLeave({ props: this.props, router: router });
        }
    };
    Route.prototype.onEnter = function (nextProps) {
        var onEnter = nextProps.onEnter;
        var router = this.context.router;
        if (this.props.path !== nextProps.path && onEnter) {
            onEnter({ props: nextProps, router: router });
        }
    };
    Route.prototype.getComponent = function (nextProps) {
        var getComponent = nextProps.getComponent;
        var router = this.context.router;
        if (this.props.path !== nextProps.path && getComponent) {
            getComponent({ props: nextProps, router: router }, this._onComponentResolved);
        }
    };
    Route.prototype.componentWillUnmount = function () {
        this.onLeave(true);
    };
    Route.prototype.componentWillReceiveProps = function (nextProps) {
        this.getComponent(nextProps);
        this.onEnter(nextProps);
        this.onLeave(this.props.path !== nextProps.path);
    };
    Route.prototype.render = function (_args) {
        var component = _args.component, children = _args.children;
        var props = utils_1.rest(_args, ['component', 'children', 'path', 'getComponent']);
        var asyncComponent = this.state.asyncComponent;
        var resolvedComponent = component || asyncComponent;
        if (!resolvedComponent) {
            return null;
        }
        return inferno_create_element_1.default(resolvedComponent, props, children);
    };
    return Route;
}(inferno_component_1.default));
exports.default = Route;
