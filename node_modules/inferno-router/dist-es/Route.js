import Component from 'inferno-component';
import createElement from 'inferno-create-element';
import { rest } from './utils';
const resolvedPromise = Promise.resolve();
export default class Route extends Component {
    constructor(props, context) {
        super(props, context);
        this._onComponentResolved = (error, component) => {
            this.setState({
                asyncComponent: component
            });
        };
        this.state = {
            asyncComponent: null
        };
    }
    componentWillMount() {
        const { onEnter } = this.props;
        const { router } = this.context;
        if (onEnter) {
            resolvedPromise.then(() => {
                onEnter({ props: this.props, router });
            });
        }
        const { getComponent } = this.props;
        if (getComponent) {
            resolvedPromise.then(() => {
                getComponent({ props: this.props, router }, this._onComponentResolved);
            });
        }
    }
    onLeave(trigger = false) {
        const { onLeave } = this.props;
        const { router } = this.context;
        if (onLeave && trigger) {
            onLeave({ props: this.props, router });
        }
    }
    onEnter(nextProps) {
        const { onEnter } = nextProps;
        const { router } = this.context;
        if (this.props.path !== nextProps.path && onEnter) {
            onEnter({ props: nextProps, router });
        }
    }
    getComponent(nextProps) {
        const { getComponent } = nextProps;
        const { router } = this.context;
        if (this.props.path !== nextProps.path && getComponent) {
            getComponent({ props: nextProps, router }, this._onComponentResolved);
        }
    }
    componentWillUnmount() {
        this.onLeave(true);
    }
    componentWillReceiveProps(nextProps) {
        this.getComponent(nextProps);
        this.onEnter(nextProps);
        this.onLeave(this.props.path !== nextProps.path);
    }
    render(_args) {
        const { component, children } = _args;
        const props = rest(_args, ['component', 'children', 'path', 'getComponent']);
        const { asyncComponent } = this.state;
        const resolvedComponent = component || asyncComponent;
        if (!resolvedComponent) {
            return null;
        }
        return createElement(resolvedComponent, props, children);
    }
}
