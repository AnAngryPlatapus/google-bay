import Component from 'inferno-component';
import { VNode } from 'inferno';
export declare type IRouteHook = (props?: any, router?: any) => void;
export interface IRouteProps {
    params?: any;
    onEnter?: IRouteHook;
    onLeave?: IRouteHook;
    path: string;
    children: Array<Component<any, any>>;
    component?: Component<any, any>;
    getComponent(nextState: any, callback: (error: any, comp: Component<any, any>) => void): void;
}
export default class Route extends Component<IRouteProps, any> {
    constructor(props?: IRouteProps, context?: any);
    componentWillMount(): void;
    private _onComponentResolved;
    onLeave(trigger?: boolean): void;
    onEnter(nextProps: any): void;
    getComponent(nextProps: any): void;
    componentWillUnmount(): void;
    componentWillReceiveProps(nextProps: IRouteProps): void;
    render(_args: IRouteProps): VNode;
}
