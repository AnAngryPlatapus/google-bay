"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var inferno_shared_1 = require("inferno-shared");
var inferno_1 = require("inferno");
var utils_1 = require("./utils");
function renderStylesToString(styles) {
    if (inferno_shared_1.isStringOrNumber(styles)) {
        return styles;
    }
    else {
        var renderedString = '';
        for (var styleName in styles) {
            var value = styles[styleName];
            var px = inferno_shared_1.isNumber(value) && !inferno_1.internal_isUnitlessNumber[styleName] ? 'px' : '';
            if (!inferno_shared_1.isNullOrUndef(value)) {
                renderedString += utils_1.toHyphenCase(styleName) + ":" + utils_1.escapeText(value) + px + ";";
            }
        }
        return renderedString;
    }
}
function renderVNodeToString(vNode, parent, context, firstChild) {
    var flags = vNode.flags;
    var type = vNode.type;
    var props = vNode.props || inferno_1.EMPTY_OBJ;
    var children = vNode.children;
    if (flags & 28 /* Component */) {
        var isClass = flags & 4 /* ComponentClass */;
        if (isClass) {
            var instance = new type(props, context);
            var childContext = void 0;
            if (!inferno_shared_1.isUndefined(instance.getChildContext)) {
                childContext = instance.getChildContext();
            }
            if (!inferno_shared_1.isNullOrUndef(childContext)) {
                context = inferno_shared_1.combineFrom(context, childContext);
            }
            if (instance.props === inferno_1.EMPTY_OBJ) {
                instance.props = props;
            }
            instance.context = context;
            instance._pendingSetState = true;
            instance._unmounted = false;
            if (inferno_shared_1.isFunction(instance.componentWillMount)) {
                instance.componentWillMount();
            }
            var nextVNode = instance.render(props, vNode.context);
            instance._pendingSetState = false;
            // In case render returns invalid stuff
            if (inferno_shared_1.isInvalid(nextVNode)) {
                return '<!--!-->';
            }
            return renderVNodeToString(nextVNode, vNode, context, true);
        }
        else {
            var nextVNode = type(props, context);
            if (inferno_shared_1.isInvalid(nextVNode)) {
                return '<!--!-->';
            }
            return renderVNodeToString(nextVNode, vNode, context, true);
        }
    }
    else if (flags & 3970 /* Element */) {
        var renderedString = "<" + type;
        var html = void 0;
        var isVoidElement = utils_1.isVoidElement(type);
        if (!inferno_shared_1.isNull(props)) {
            for (var prop in props) {
                var value = props[prop];
                if (prop === 'dangerouslySetInnerHTML') {
                    html = value.__html;
                }
                else if (prop === 'style') {
                    renderedString += " style=\"" + renderStylesToString(props.style) + "\"";
                }
                else if (prop === 'className' && !inferno_shared_1.isNullOrUndef(value)) {
                    renderedString += " class=\"" + utils_1.escapeText(value) + "\"";
                }
                else if (prop === 'children') {
                    // Ignore children as prop.
                }
                else if (prop === 'defaultValue') {
                    // Use default values if normal values are not present
                    if (!props.value) {
                        renderedString += " value=\"" + utils_1.escapeText(value) + "\"";
                    }
                }
                else if (prop === 'defaultChecked') {
                    // Use default values if normal values are not present
                    if (!props.checked) {
                        renderedString += " checked=\"" + value + "\"";
                    }
                }
                else if (prop === 'value' && parent.props && parent.props.value) {
                    // Parent value sets children value
                    if (value === parent.props.value) {
                        renderedString += " selected";
                    }
                }
                else {
                    if (inferno_shared_1.isStringOrNumber(value)) {
                        renderedString += " " + prop + "=\"" + utils_1.escapeText(value) + "\"";
                    }
                    else if (inferno_shared_1.isTrue(value)) {
                        renderedString += " " + prop;
                    }
                }
            }
        }
        if (isVoidElement) {
            renderedString += ">";
        }
        else {
            renderedString += ">";
            if (!inferno_shared_1.isInvalid(children)) {
                if (inferno_shared_1.isArray(children)) {
                    for (var i = 0, len = children.length; i < len; i++) {
                        var child = children[i];
                        if (inferno_shared_1.isStringOrNumber(child)) {
                            renderedString += (child === '' ? ' ' : utils_1.escapeText(child));
                        }
                        else if (!inferno_shared_1.isInvalid(child)) {
                            renderedString += renderVNodeToString(child, vNode, context, i === 0);
                        }
                    }
                }
                else if (inferno_shared_1.isStringOrNumber(children)) {
                    renderedString += (children === '' ? ' ' : utils_1.escapeText(children));
                }
                else {
                    renderedString += renderVNodeToString(children, vNode, context, true);
                }
            }
            else if (html) {
                renderedString += html;
            }
            if (!isVoidElement) {
                renderedString += "</" + type + ">";
            }
        }
        return renderedString;
    }
    else if (flags & 1 /* Text */) {
        return (firstChild ? '' : '<!---->') + (children === '' ? ' ' : utils_1.escapeText(children));
    }
    else {
        if (process.env.NODE_ENV !== 'production') {
            if (typeof vNode === 'object') {
                inferno_shared_1.throwError("renderToString() received an object that's not a valid VNode, you should stringify it first. Object: \"" + JSON.stringify(vNode) + "\".");
            }
            else {
                inferno_shared_1.throwError("renderToString() expects a valid VNode, instead it received an object with the type \"" + typeof vNode + "\".");
            }
        }
        inferno_shared_1.throwError();
    }
}
function renderToString(input) {
    return renderVNodeToString(input, {}, {}, true);
}
exports.default = renderToString;
function renderToStaticMarkup(input) {
    return renderVNodeToString(input, {}, {}, true);
}
exports.renderToStaticMarkup = renderToStaticMarkup;
