"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var inferno_shared_1 = require("inferno-shared");
var prop_renderers_1 = require("./prop-renderers");
var utils_1 = require("./utils");
var stream_1 = require("stream");
var resolvedPromise = Promise.resolve();
var RenderStream = (function (_super) {
    __extends(RenderStream, _super);
    function RenderStream(initNode, staticMarkup) {
        var _this = _super.call(this) || this;
        _this.started = false;
        _this.initNode = initNode;
        _this.staticMarkup = staticMarkup;
        return _this;
    }
    RenderStream.prototype._read = function () {
        var _this = this;
        if (this.started) {
            return;
        }
        this.started = true;
        resolvedPromise.then(function () {
            return _this.renderNode(_this.initNode, null, _this.staticMarkup);
        }).then(function () {
            _this.push(null);
        }).catch(function (err) {
            _this.emit('error', err);
        });
    };
    RenderStream.prototype.renderNode = function (vNode, context, isRoot) {
        if (inferno_shared_1.isInvalid(vNode)) {
            return;
        }
        else {
            var flags = vNode.flags;
            if (flags & 28 /* Component */) {
                return this.renderComponent(vNode, isRoot, context, flags & 4 /* ComponentClass */);
            }
            else if (flags & 3970 /* Element */) {
                return this.renderElement(vNode, isRoot, context);
            }
            else {
                return this.renderText(vNode, isRoot, context);
            }
        }
    };
    RenderStream.prototype.renderComponent = function (vComponent, isRoot, context, isClass) {
        var _this = this;
        var type = vComponent.type;
        var props = vComponent.props;
        if (!isClass) {
            return this.renderNode(type(props), context, isRoot);
        }
        var instance = new type(props);
        var childContext;
        if (!inferno_shared_1.isUndefined(instance.getChildContext)) {
            childContext = instance.getChildContext();
        }
        if (!inferno_shared_1.isNullOrUndef(childContext)) {
            context = inferno_shared_1.combineFrom(context, childContext);
        }
        instance.context = context;
        // Block setting state - we should render only once, using latest state
        instance._pendingSetState = true;
        return Promise.resolve(instance.componentWillMount && instance.componentWillMount()).then(function () {
            var node = instance.render();
            instance._pendingSetState = false;
            return _this.renderNode(node, context, isRoot);
        });
    };
    RenderStream.prototype.renderChildren = function (children, context) {
        var _this = this;
        if (inferno_shared_1.isStringOrNumber(children)) {
            return this.push(utils_1.escapeText(children));
        }
        if (!children) {
            return;
        }
        var childrenIsArray = inferno_shared_1.isArray(children);
        if (!childrenIsArray && !inferno_shared_1.isInvalid(children)) {
            return this.renderNode(children, context, false);
        }
        if (!childrenIsArray) {
            throw new Error('invalid component');
        }
        return children.reduce(function (p, child) {
            return p.then(function (insertComment) {
                var isText = inferno_shared_1.isStringOrNumber(child);
                if (isText) {
                    if (insertComment === true) {
                        _this.push('<!---->');
                    }
                    if (isText) {
                        _this.push(utils_1.escapeText(child));
                    }
                    return true;
                }
                else if (inferno_shared_1.isArray(child)) {
                    _this.push('<!---->');
                    return Promise.resolve(_this.renderChildren(child)).then(function () {
                        _this.push('<!--!-->');
                        return true;
                    });
                }
                else if (!inferno_shared_1.isInvalid(child)) {
                    if (child.flags & 1 /* Text */) {
                        if (insertComment) {
                            _this.push('<!---->');
                        }
                        insertComment = true;
                    }
                    return Promise.resolve(_this.renderNode(child, context, false))
                        .then(function (_insertComment) {
                        if (child.flags & 1 /* Text */) {
                            return true;
                        }
                        return false;
                    });
                }
            });
        }, Promise.resolve(false));
    };
    RenderStream.prototype.renderText = function (vNode, isRoot, context) {
        var _this = this;
        return resolvedPromise.then(function (insertComment) {
            _this.push(vNode.children);
            return insertComment;
        });
    };
    RenderStream.prototype.renderElement = function (vElement, isRoot, context) {
        var _this = this;
        var tag = vElement.type;
        var props = vElement.props;
        var outputAttrs = prop_renderers_1.renderAttributes(props);
        var html = '';
        if (props) {
            var className = props.className;
            if (!inferno_shared_1.isNullOrUndef(className)) {
                outputAttrs.push('class="' + utils_1.escapeText(className) + '"');
            }
            var style = props.style;
            if (style) {
                outputAttrs.push('style="' + prop_renderers_1.renderStyleToString(style) + '"');
            }
            if (props.dangerouslySetInnerHTML) {
                html = props.dangerouslySetInnerHTML.__html;
            }
        }
        if (isRoot) {
            outputAttrs.push('data-infernoroot');
        }
        this.push("<" + tag + (outputAttrs.length > 0 ? ' ' + outputAttrs.join(' ') : '') + ">");
        if (utils_1.isVoidElement(tag)) {
            return;
        }
        if (html) {
            this.push(html);
            this.push("</" + tag + ">");
            return;
        }
        return Promise.resolve(this.renderChildren(vElement.children, context)).then(function () {
            _this.push("</" + tag + ">");
        });
    };
    return RenderStream;
}(stream_1.Readable));
exports.RenderStream = RenderStream;
function streamAsString(node) {
    return new RenderStream(node, false);
}
exports.default = streamAsString;
function streamAsStaticMarkup(node) {
    return new RenderStream(node, true);
}
exports.streamAsStaticMarkup = streamAsStaticMarkup;
