"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var inferno_component_1 = require("inferno-component");
var inferno_create_class_1 = require("inferno-create-class");
var inferno_shared_1 = require("inferno-shared");
var inject_1 = require("./inject");
var makeReactive_1 = require("./makeReactive");
/**
 * Wraps a component and provides stores as props
 */
function connect(arg1, arg2) {
    if (arg2 === void 0) { arg2 = null; }
    if (typeof arg1 === 'string') {
        inferno_shared_1.throwError('Store names should be provided as array');
    }
    if (Array.isArray(arg1)) {
        // component needs stores
        if (!arg2) {
            // invoked as decorator
            return function (componentClass) { return connect(arg1, componentClass); };
        }
        else {
            // TODO: deprecate this invocation style
            return inject_1.default.apply(null, arg1)(connect(arg2));
        }
    }
    var componentClass = arg1;
    // Stateless function component:
    // If it is function but doesn't seem to be a Inferno class constructor,
    // wrap it to a Inferno class automatically
    if (typeof componentClass === 'function'
        && (!componentClass.prototype || !componentClass.prototype.render)
        && !componentClass.isReactClass
        && !inferno_component_1.default.isPrototypeOf(componentClass)) {
        var newClass = inferno_create_class_1.default({
            displayName: componentClass.displayName || componentClass.name,
            propTypes: componentClass.propTypes,
            contextTypes: componentClass.contextTypes,
            getDefaultProps: function () { return componentClass.defaultProps; },
            render: function () {
                return componentClass.call(this, this.props, this.context);
            }
        });
        return connect(newClass);
    }
    if (!componentClass) {
        inferno_shared_1.throwError('Please pass a valid component to "connect"');
    }
    componentClass.isMobXReactObserver = true;
    return makeReactive_1.default(componentClass);
}
exports.default = connect;
