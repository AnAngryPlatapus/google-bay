"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var inferno_component_1 = require("inferno-component");
var inferno_shared_1 = require("inferno-shared");
var specialKeys = {
    children: true,
    key: true,
    ref: true
};
var Provider = (function (_super) {
    __extends(Provider, _super);
    function Provider(props, context) {
        var _this = _super.call(this, props, context) || this;
        _this.contextTypes = { mobxStores: function () { } };
        _this.childContextTypes = { mobxStores: function () { } };
        _this.store = props.store;
        return _this;
    }
    Provider.prototype.render = function () {
        return this.props.children;
    };
    Provider.prototype.getChildContext = function () {
        var stores = {};
        // inherit stores
        var baseStores = this.context.mobxStores;
        if (baseStores) {
            for (var key in baseStores) {
                stores[key] = baseStores[key];
            }
        }
        // add own stores
        for (var key in this.props) {
            if (!specialKeys[key]) {
                stores[key] = this.props[key];
            }
        }
        return {
            mobxStores: stores
        };
    };
    return Provider;
}(inferno_component_1.default));
exports.default = Provider;
if (process.env.NODE_ENV !== 'production') {
    Provider.prototype.componentWillReceiveProps = function (nextProps) {
        // Maybe this warning is to aggressive?
        if (Object.keys(nextProps).length !== Object.keys(this.props).length) {
            inferno_shared_1.warning('MobX Provider: The set of provided stores has changed. ' +
                'Please avoid changing stores as the change might not propagate to all children');
        }
        for (var key in nextProps) {
            if (!specialKeys[key] && this.props[key] !== nextProps[key]) {
                inferno_shared_1.warning("MobX Provider: Provided store '" + key + "' has changed. " +
                    "Please avoid replacing stores as the change might not propagate to all children");
            }
        }
    };
}
